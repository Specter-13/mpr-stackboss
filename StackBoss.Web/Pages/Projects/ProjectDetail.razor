@page "/Project/{Id}"
@inject ProjectService projectService
@inject NavigationManager NavigationManager



@if(Project == null)
{
    <p>Loading...</p>
}
else
{

    <h1>@Project.Name</h1>
    <p>@Project.Manager</p>
    <p>@Project.Staff</p>
    <hr/>
    <p>@Project.Description</p>

    
    @if(Project.RiskList != null)
    {
        <hr/>
        <h3>Risks</h3>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Category</th>
                    <th scope="col">Date of creation</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var risk in Project.RiskList)
                {
                    <tr>
                        <th>
                            @risk.CustomId 
                        </th>
                        <td>@risk.Name</td>
                        <td>@risk.Category</td>
                        <td>@risk.CreatedDate.ToString("dd.MM.yyyy")</td>
                        <td>  <button class="btn btn-primary" @onclick="() => OnDetailClicked(risk.Id)">Detail</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
<button class="btn btn-primary" @onclick="() => OnEditClicked(Project.Id)">Edit</button>

@code {
    [Parameter]
    public string Id { get; set; }

    ProjectEntity Project = new ProjectEntity();

    private void OnDetailClicked(int id)
    {
        NavigationManager.NavigateTo($"/Risk/{id}");
    }
    private void OnEditClicked(int id)
    {
        NavigationManager.NavigateTo($"/EditProject/{id}");
    }
    protected override async Task OnInitializedAsync()
    {
        Project = await projectService.GetProjectAsync(Convert.ToInt32(Id));
    }
}
