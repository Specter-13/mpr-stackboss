@page "/Projects"
@inject ProjectService projectService
@inject NavigationManager NavigationManager

<h3>Projects</h3>


@if(ProjectList == null)
{
    <p>Loading..</p>
}
else
{
<div class="container">
    <div>
        <h1>
            <span class="HP-font">Projects</span>
            <span>
                <button type="button" class="btn btn-primary" @onclick="OnAddClicked">Add new Project</button>
            </span>
        </h1>
    </div>
    <div class="row">
        <div class="container">
            <ul class="list-group">
                @foreach (ProjectEntity proj in ProjectList)
                {
                    <NavLink class="no-text-decoration seller-list" href="@($"/Project/{proj.Id}")">
                        <li class="list-group-item d-flex justify-content-start">
                           @* <div style="width: 25% !important">
                                <div class="img" style="background-image: url('@seller.LogoUri');">
                                </div>
                            </div>*@
                            <div style="width:73%; margin-top: 1.5em; padding-left: 2%">
                                <h2 class="HP-font">@proj.Name</h2>
                                <p >@proj.Manager</p>
                            </div>
                        </li>
                    </NavLink>
                }
            </ul>
        </div>
    </div>
</div>
}
@code {
    private List<ProjectEntity> ProjectList;
    private ProjectEntity Project;

    private void OnDetailClicked(ProjectEntity context)
    {
         //NavigationManager.NavigateTo($"EditRisk/{context.Id}");

    }
    private void OnDeleteClicked(ProjectEntity context)
    {
        // NavigationManager.NavigateTo($"Delete/{context.Id}");

    }
    private void OnAddClicked()
    {
        NavigationManager.NavigateTo("AddProject");

    }

    protected override async Task OnInitializedAsync()
    {
        ProjectList = await projectService.GetAllProjectsAsync();
     
    }
}

